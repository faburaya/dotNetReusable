<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reusable.Utils</name>
    </assembly>
    <members>
        <member name="T:Reusable.Utils.BinarySearchExtension">
            <summary>
            Implementiert eine allgemeine binäre Suche für sortierte Listen.
            </summary>
        </member>
        <member name="M:Reusable.Utils.BinarySearchExtension.SearchLowerBoundIndex``2(System.Collections.Generic.IList{``1},``0,System.Func{``1,``0})">
            <summary>
            Findet in der Liste die untere Grenze ("lower bound"):
            Das erste Element, das den gegebenen Schlüssel aufweist, wenn es vorhaden ist,
            andernfalls ist es das unmittelbar nächste Element.
            </summary>
            <typeparam name="KeyType">Der Typ des Schlüssels.</typeparam>
            <typeparam name="DataType">Der Datentyp.</typeparam>
            <param name="values">Die zu suchende Liste.</param>
            <param name="key">Der Schlüssel des erwünschten Elements.</param>
            <param name="getKeyOf">Gibt den Schlüssel eines gegebenen Elements zurück.</param>
            <returns>Der Index der unteren Grenze.</returns>
        </member>
        <member name="M:Reusable.Utils.BinarySearchExtension.SearchUpperBoundIndex``2(System.Collections.Generic.IList{``1},``0,System.Func{``1,``0})">
            <summary>
            Findet in der Liste die obere Grenze ("upper bound"):
            Das erste Element, das einen Schlüssel aufweist, das größer als der gegebener Schlüssel ist.
            </summary>
            <typeparam name="KeyType">Der Typ des Schlüssels.</typeparam>
            <typeparam name="DataType">Der Datentyp.</typeparam>
            <param name="values">Die zu suchende Liste.</param>
            <param name="key">Der Schlüssel des erwünschten Elements.</param>
            <param name="getKeyOf">Gibt den Schlüssel eines gegebenen Elements zurück.</param>
            <returns>Der Index der oberen Grenze.</returns>
        </member>
        <member name="T:Reusable.Utils.CollectionExtension">
            <summary>
            Implementiert Erweiterungen, die bei der Handlung von Sammlungen hilfreich sind.
            </summary>
        </member>
        <member name="M:Reusable.Utils.CollectionExtension.ChangeValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1,``1})">
            <summary>
            Ändert einen Wert in der Hashtabelle durch einen einzigen Vorgang.
            </summary>
            <typeparam name="KeyType">Der Typ des Schlüsselwerts.</typeparam>
            <typeparam name="ValueType">Der Typ des Werts.</typeparam>
            <param name="dictionary">Die Hashtabelle.</param>
            <param name="key">Der Schlüsselwert.</param>
            <param name="getPreviousValueAndSetNew">Eine Rückrufaktion, die den derzeitigen oder vorgegebenen Wert bekommt und einen Neuen setzt.</param>
            <returns>Ob ein dem Schlüssel enstsprechender Wert schon vorhanden war.</returns>
        </member>
        <member name="T:Reusable.Utils.ILogger">
            <summary>
            Emöglicht die Injezierung von unterschiedlichen Protokollanbietern, etwa
            NLog oder Serilog, die durch eine gemeinsame Schnittstelle benutzt werden können.
            </summary>
        </member>
        <member name="M:Reusable.Utils.ILogger.Critical(System.String)">
            <summary>
            Protokolliert einen kritischen Fehler.
            </summary>
            <param name="message">Die Nachricht.</param>
        </member>
        <member name="M:Reusable.Utils.ILogger.Error(System.String)">
            <summary>
            Protokolliert einen Fehler.
            </summary>
            <param name="message">Die Nachricht.</param>
        </member>
        <member name="M:Reusable.Utils.ILogger.Warning(System.String)">
            <summary>
            Protokolliert eine Warnung.
            </summary>
            <param name="message">Die Nachricht.</param>
        </member>
        <member name="M:Reusable.Utils.ILogger.Info(System.String)">
            <summary>
            Protokolliert zusätzliche Information.
            </summary>
            <param name="message">Die Nachricht.</param>
        </member>
        <member name="M:Reusable.Utils.ILogger.Debug(System.String)">
            <summary>
            Protokolliert eine Nachricht zum Debuggen.
            </summary>
            <param name="message">Die Nachricht.</param>
        </member>
        <member name="M:Reusable.Utils.ILogger.Trace(System.String)">
            <summary>
            Protokolliert eine Nachricht, um den Lauf des Programms zu verfolgen.
            </summary>
            <param name="message">Die Nachricht.</param>
        </member>
        <member name="T:Reusable.Utils.With`1">
            <summary>
            Gewährt einfache Implementierungen für übliche Aufgaben.
            </summary>
            <typeparam name="DataType">Der Datentyp zu nutzen.</typeparam>
        </member>
        <member name="T:Reusable.Utils.With`1.CreateObject">
            <summary>
            Signatur für eine Rückrufaktion, die für die Erstellung eines Objektes zuständig ist.
            </summary>
            <returns>Ein neu erstelltes Objekt.</returns>
        </member>
        <member name="M:Reusable.Utils.With`1.CreateArrayOf(System.Int32,Reusable.Utils.With{`0}.CreateObject)">
            <summary>
            Erstellt ein Array von Objekten des vorgegebenen Typs.
            </summary>
            <param name="count">Wie viele Objekte erstellt werden müssen.</param>
            <param name="callback">Die Rückrufaktion für die Erstellung der Objekte.</param>
            <returns>Ein Array mit <paramref name="count"/> Objekten.</returns>
        </member>
        <member name="M:Reusable.Utils.With`1.CreateListOf(System.Int32,Reusable.Utils.With{`0}.CreateObject)">
            <summary>
            Erstellt eine Liste von Objekten des vorgegebenen Typs.
            </summary>
            <param name="count">Wie viele Objekte erstellt werden müssen.</param>
            <param name="callback">Die Rückrufaktion für die Erstellung der Objekte.</param>
            <returns>Ein Liste mit <paramref name="count"/> Objekten.</returns>
        </member>
        <member name="T:Reusable.Utils.With`1.CreateObjectAt">
            <summary>
            Signatur für eine Rückrufaktion, die für die Erstellung eines Objektes zuständig ist.
            </summary>
            <param name="index">Der Index des Objekts, das in einer Reihe steht.</param>
            <returns>Ein neu esrtelltes Objekt.</returns>
        </member>
        <member name="M:Reusable.Utils.With`1.CreateArrayOf(System.Int32,Reusable.Utils.With{`0}.CreateObjectAt)">
            <summary>
            Erstellt ein Array von Objekten des vorgegebenen Typs.
            </summary>
            <param name="count">Wie viele Objekte erstellt werden müssen.</param>
            <param name="callback">Die Rückrufaktion für die Erstellung der Objekte, wobei der Index jedes Objektes übergeben wird.</param>
            <returns>Ein Array mit <paramref name="count"/> Objekten.</returns>
        </member>
        <member name="M:Reusable.Utils.With`1.CreateListOf(System.Int32,Reusable.Utils.With{`0}.CreateObjectAt)">
            <summary>
            Erstellt eine Liste von Objekten des vorgegebenen Typs.
            </summary>
            <param name="count">Wie viele Objekte erstellt werden müssen.</param>
            <param name="callback">Die Rückrufaktion für die Erstellung der Objekte, wobei der Index jedes Objektes übergeben wird.</param>
            <returns>Ein Liste mit <paramref name="count"/> Objekten.</returns>
        </member>
        <member name="M:Reusable.Utils.With`1.ConcatenateViewOf(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Schafft eine einzige Ansicht durch die Zusammensetzung von verschiedenen Sammlungen,
            ohne dass deren Inhalt kopiert werden muss.
            </summary>
            <param name="collections">Die viele zusammenzusetzenden Sammlungen.</param>
            <returns>Eine Ansicht, die alle Elemente aller Sammlungen zusammenfasst.</returns>
        </member>
        <member name="T:Reusable.Utils.PasswordBasedCredential">
            <summary>
            Enthält eine auf Kennwort basierte Anmeldeinformation.
            </summary>
        </member>
        <member name="P:Reusable.Utils.PasswordBasedCredential.UserId">
            <summary>
            Die Benutzerkennung.
            </summary>
        </member>
        <member name="P:Reusable.Utils.PasswordBasedCredential.Password">
            <summary>
            Das Kennwort.
            </summary>
        </member>
        <member name="M:Reusable.Utils.PasswordBasedCredential.Equals(Reusable.Utils.PasswordBasedCredential)">
            <inheritdoc/>
        </member>
        <member name="T:Reusable.Utils.RetryStrategy">
            <summary>
            Gewährt eine Strategie für Wiederholungen von gescheiterten Operationen.
            </summary>
        </member>
        <member name="M:Reusable.Utils.RetryStrategy.CalculateExponentialBackoff(System.TimeSpan,System.UInt32)">
            <summary>
            Rechnet die Wartezeit für die Wiederholung einer Operation.
            </summary>
            <param name="timeSlot">Die minimale Wartezeit.</param>
            <param name="attempt">Die bisherige Anzahl von Wiederholungen.</param>
            <returns>Die gerechnete Wartezeit.</returns>
        </member>
        <member name="T:Reusable.Utils.SecretLoader">
            <summary>
            Lädt geheime Daten, die außerhalb der appsettings.json bleiben sollen.
            (Zum Beispiel, die Verbindungszeichenkette der Datenbank.)
            </summary>
        </member>
        <member name="M:Reusable.Utils.SecretLoader.#ctor(Reusable.Utils.XmlMetadata)">
            <summary>
            Lädt die Datenquelle mit den Geheimnissen.
            </summary>
        </member>
        <member name="M:Reusable.Utils.SecretLoader.GetConnectionString(System.String)">
            <summary>
            Bietet eine Verbindugszeichenkette.
            </summary>
            <param name="name">Der Name der gewünschten Verbindung.</param>
            <returns>
            Der geheime Teil der Verbindungszeichenkette, wenn es vorhanden ist.
            (Zum Beispiel: "Server;Database;User ID;Password;")
            </returns>
        </member>
        <member name="M:Reusable.Utils.SecretLoader.GetCredential(System.String)">
            <summary>
            Bietet Anmeldeinformationen.
            </summary>
            <param name="name">Der Name der Anmeldung.</param>
            <returns>Die Anmeldeinformationen: Benutzer und Kennwort.</returns>
        </member>
        <member name="T:Reusable.Utils.SimpleConsoleLogger">
            <summary>
            Bietet einfache Protokollierung, die auf die Konsole schreibt.
            </summary>
        </member>
        <member name="M:Reusable.Utils.SimpleConsoleLogger.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Reusable.Utils.SimpleFileLogger">
            <summary>
            Bietet einfache Protokollierung, die auf eine Datei geschrieben wird.
            </summary>
        </member>
        <member name="M:Reusable.Utils.SimpleFileLogger.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von <see cref="T:Reusable.Utils.SimpleFileLogger"/>.
            </summary>
            <param name="logFilePath">Das Pfad der Datei, auf die protokolliert wird.</param>
        </member>
        <member name="M:Reusable.Utils.SimpleFileLogger.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Reusable.Utils.SimpleFileLogger.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Reusable.Utils.SimpleLoggerBase">
            <summary>
            Eine sehr einfache Implementierung für Protokollierung.
            Sie kann für Tests nützlich sein.
            </summary>
        </member>
        <member name="M:Reusable.Utils.SimpleLoggerBase.WriteLine(System.String)">
            <summary>
            Die Überschreibung dieser Methode bestimmt, wie das zu protokollierende Ereignis geschrieben wird.
            </summary>
            <param name="text">Der zu schreibende Text.</param>
        </member>
        <member name="M:Reusable.Utils.SimpleLoggerBase.Critical(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Reusable.Utils.SimpleLoggerBase.Error(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Reusable.Utils.SimpleLoggerBase.Warning(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Reusable.Utils.SimpleLoggerBase.Info(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Reusable.Utils.SimpleLoggerBase.Debug(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Reusable.Utils.SimpleLoggerBase.Trace(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Reusable.Utils.SubstringRef">
            <summary>
            Stellt ein Verweis auf eine Zeichenkette innerhalb einem bestimmten Text.
            </summary>
        </member>
        <member name="F:Reusable.Utils.SubstringRef.start">
            <summary>
            Der Index des Anfangs der Zeichenkette.
            </summary>
        </member>
        <member name="F:Reusable.Utils.SubstringRef.length">
            <summary>
            Die Länge der Zeichenkette.
            </summary>
        </member>
        <member name="M:Reusable.Utils.SubstringRef.#ctor">
            <summary>
            Erstellt ein leeres Objekt.
            </summary>
        </member>
        <member name="M:Reusable.Utils.SubstringRef.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Erstellt ein Objekt des Typs <see cref="T:Reusable.Utils.SubstringRef"/>.
            </summary>
            <param name="source">Der Quelltext.</param>
            <param name="start">Der Index des Anfangs der Zeichenkette.</param>
            <param name="length">Die Länge der Zeichenkette.</param>
        </member>
        <member name="M:Reusable.Utils.SubstringRef.#ctor(System.Text.RegularExpressions.Capture,System.String)">
            <summary>
            Erstellt ein Objekt des Typs <see cref="T:Reusable.Utils.SubstringRef"/>.
            </summary>
            <param name="match">Eine einzelne Übereinstimmung eines regulären Ausdruck im Quelltext.</param>
            <param name="source">Der Quelltext.</param>
        </member>
        <member name="M:Reusable.Utils.SubstringRef.AsSpan">
            <summary>
            Wandelt das Objekt in den Typ <see cref="T:System.ReadOnlySpan`1"/> um.
            </summary>
            <returns>Eine Instanz des Typs <see cref="T:System.ReadOnlySpan`1"/>, die auf den Quelltext hinweist.</returns>
        </member>
        <member name="M:Reusable.Utils.SubstringRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Reusable.Utils.SubstringRef.CompareTo(Reusable.Utils.SubstringRef,System.StringComparison)">
            <summary>
            Vergleicht diese Instanz mit einem anderem Objekt desselben Typs.
            </summary>
            <param name="other">Das andere Objekt.</param>
            <param name="comparison">Wie der Vergleich auszuführen ist.</param>
            <returns>
            Gibt eine Zahl unter 0 zurück, falls diese Instanz vor <paramref name="other"/> einzuordnen ist.
            Gibt eine Zahl über 0 zurück, falls diese Instanz nach <paramref name="other"/> einzuordnen ist.
            Gibt 0 zurück, falls der Inhalt dieses Instanz dem Inhalt von <paramref name="other"/> gleicht.
            </returns>
        </member>
        <member name="M:Reusable.Utils.SubstringRef.CompareTo(Reusable.Utils.SubstringRef)">
            <inheritdoc/>
        </member>
        <member name="T:Reusable.Utils.UidGenerator`1">
            <summary>
            Grundlegende Implementierung für die Erstellung von einzigartigen Identificakationen.
            </summary>
        </member>
        <member name="M:Reusable.Utils.UidGenerator`1.GenerateIdFor(`0)">
            <summary>
            Erstellt eine einzigartige Identifikation für ein gegebenes Objekt.
            </summary>
            <param name="obj">Das gegebene Objekt.</param>
            <returns>Eine Identifikation.</returns>
            <remarks>Die Identifikation ist nie dieselbe, auch wenn das Objekt dasselbe ist.</remarks>
        </member>
        <member name="T:Reusable.Utils.WordUtils">
            <summary>
            Sammlung von Algorithmen, die bei der Arbeit mit Wörtern nützlich sind.
            </summary>
        </member>
        <member name="M:Reusable.Utils.WordUtils.FindEndOfWord(System.String,System.Int32)">
            <summary>
            Findet das Ende eines Wortes.
            </summary>
            <param name="text">Der Text.</param>
            <param name="offset">Ab dieser Indexposition nach rechts startet die Suche.</param>
            <returns>Falls <paramref name="offset"/> mitten in einem Wort liegt, dann gibt die Indexposition nach seinem letzten Charakter zurück, sonst <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Reusable.Utils.WordUtils.FindStartOfWord(System.String,System.Int32)">
            <summary>
            Findet den Anfang eines Wortes.
            </summary>
            <param name="text">Der Text.</param>
            <param name="offset">Ab dieser Indexposition nach links startet die Suche.</param>
            <returns>Falls <paramref name="offset"/> mitten in einem Wort liegt, dann gibt die Indexposition seines ersten Charakters zurück, sonst <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Reusable.Utils.WordUtils.FindClosestStartOrEndOfWord(System.String,System.Int32)">
            <summary>
            Findet den Anfang oder das Ende eines Wortes, je nachdem, welche näher ist.
            </summary>
            <param name="text">Der Text.</param>
            <param name="offset">Es wird um diese Indexposition rückwärts nach dem Anfang des Wortes und vorwärts nach dem Ende des Wortes gesucht.</param>
            <returns>Falls <paramref name="offset"/> innerhalb eines Wort liegt, dann gibt die Indexposition des Anfangs oder des Endes des Wortes zurück, je nachdem, welche näher ist. Sonst, gibt <paramref name="offset"/> zurück.</returns>
        </member>
        <member name="M:Reusable.Utils.WordUtils.SplitIntoWordsAsRefs(System.String,System.Int32,System.Int32)">
            <summary>
            Spaltet einen Bereich im Text in Wörter auf.
            </summary>
            <param name="text">Der Text.</param>
            <param name="begin">Legt den Bereich fest: die Indexposition des ersten Charakter.</param>
            <param name="end">Legt den Bereich fest: die Indexposition nach dem letzten Charakter.</param>
            <returns>Eine Liste mit Instanzen von <see cref="T:Reusable.Utils.SubstringRef"/>, die auf die Wörter verweisen.</returns>
        </member>
        <member name="M:Reusable.Utils.WordUtils.SplitIntoWords(System.String,System.Int32,System.Int32)">
            <summary>
            Spaltet einen Bereich im Text in Wörter auf.
            </summary>
            <param name="text">Der Text.</param>
            <param name="begin">Legt den Bereich fest: die Indexposition des ersten Charakter.</param>
            <param name="end">Legt den Bereich fest: die Indexposition nach dem letzten Charakter.</param>
            <returns>Eine Liste mit Kopien der aufgespalteten Wörter.</returns>
        </member>
        <member name="T:Reusable.Utils.XmlMetadata">
            <summary>
            Metadaten über die zu ladende XML-Datei.
            </summary>
        </member>
        <member name="P:Reusable.Utils.XmlMetadata.XmlNamespace">
            <summary>
            Namespace, wo in der XML-Datei die Namen deklariert werden.
            </summary>
        </member>
        <member name="P:Reusable.Utils.XmlMetadata.FilePath">
            <summary>
            Pfad der XML-Datei.
            </summary>
        </member>
        <member name="P:Reusable.Utils.XmlMetadata.SchemaFilePath">
            <summary>
            Pfad der XSD-Datei.
            </summary>
        </member>
        <member name="M:Reusable.Utils.XmlMetadata.#ctor(System.String,System.String,System.String)">
            <summary>
            Erstellt eine neue Instanz von <see cref="T:Reusable.Utils.XmlMetadata"/>.
            </summary>
            <param name="xmlns">Das Namespace.</param>
            <param name="filePath">Das Pfad der XML-Datei.</param>
            <param name="schemaFilePath">Das Pfad der XSD-Datei.</param>
        </member>
    </members>
</doc>
