<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reusable.WebAccess</name>
    </assembly>
    <members>
        <member name="T:Reusable.WebAccess.DatenSauger`1">
            <summary>
            Ein Webcrawler für die Datensammlung von Webseiten durch die Durchsuchung von Hyperlinks.
            </summary>
            <remarks>
            Implementiert die Datensammlung, sodass sie in einer bestimmten Webseite aufbricht.
            Jede Webseite enthält Hyperlinks, die mithilfe von Schlüsselwörtern gefasst werden müssen,
            und die dann zu einer anderen Webseite führen, was hiermit als "Hop" gennant wird.
            </remarks>
            <typeparam name="DataType">Der Typ für die Daten, die am Ende gesammelt werden.</typeparam>
        </member>
        <member name="M:Reusable.WebAccess.DatenSauger`1.#ctor(Reusable.WebAccess.IHypertextFetcher,System.Action{Reusable.WebAccess.ParserException})">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="hypertextFetcher">Injizierte Implementierung für die Abrufung von Hypertext.</param>
            <param name="exceptionHandler">Handler für aufgetretene Ausnahmen von Typ <see cref="T:Reusable.WebAccess.ParserException"/>.</param>
        </member>
        <member name="M:Reusable.WebAccess.DatenSauger`1.CollectDataAsync(System.Uri,System.Collections.Generic.IEnumerable{System.ValueTuple{Reusable.WebAccess.IHyperlinksParser,System.Collections.Generic.IEnumerable{System.String}}},Reusable.WebAccess.IHypertextContentParser{`0})">
            <summary>
            Startet die Datensammlung asynchron.
            </summary>
            <param name="firstUrl">Das URL der ersten Webseite.</param>
            <param name="hops"> Eine Liste von erwarteten Hops. Jedes Hop besteht in einem injizierten Zerglieder und seinen benötigten Schlüsselwörtern.</param>
            <param name="contentParser">Injizierter Zerglieder für den Inhalt der am Ende der Hops erreichten Webseite.</param>
            <returns>Eine asynchrone Aufgabe, die die gesamten gesammelten Daten verspricht.</returns>
        </member>
        <member name="M:Reusable.WebAccess.DatenSauger`1.CollectData(System.Uri,System.Collections.Generic.IEnumerable{System.ValueTuple{Reusable.WebAccess.IHyperlinksParser,System.Collections.Generic.IEnumerable{System.String}}},Reusable.WebAccess.IHypertextContentParser{`0})">
            <summary>
            Führt die Datensammlung durch.
            </summary>
            <param name="firstUrl">Das URL der ersten Webseite.</param>
            <param name="hops"> Eine Liste von erwarteten Hops. Jedes Hop besteht in einem injizierten Zerglieder und seinen benötigten Schlüsselwörtern.</param>
            <param name="contentParser">Injizierter Zerglieder für den Inhalt der am Ende der Hops erreichten Webseite.</param>
            <remarks>Denn das Herunterladen von Webseiten zeitintensiv sein kann, läuft es asynchron im Hintergrund, während die Ergebnisse schrittweise freigegeben werden.</remarks>
            <returns>Eine Liste mit den gesammelten Daten.</returns>
        </member>
        <member name="M:Reusable.WebAccess.DatenSauger`1.WrapCall``1(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Uri)">
            <summary>
            Wickelt den Ruf einer Rückrufaktion ein, sodass eine eventuelle Ausnahme angemessen behandelt wird, ohne dass der Anrufer gestört wird.
            </summary>
            <typeparam name="ReturnType">Der Datentyp der zurückzugebenden Liste.</typeparam>
            <param name="callback">Die einzuwickelnde Rückrufaktion.</param>
            <param name="url">Gibt den kontext an, falls eine Ausnahme auftritt.</param>
            <returns>Die Rückgabe der Rückrufaktion.</returns>
        </member>
        <member name="T:Reusable.WebAccess.HypertextFetcher">
            <summary>
            Gewährt die Fähigkeit zum Abrufen des Hypertext aus einer Webseite.
            </summary>
        </member>
        <member name="M:Reusable.WebAccess.HypertextFetcher.#ctor(System.UInt32,System.UInt16)">
            <summary>
            Ertellt eine neue Instanz von <see cref="T:Reusable.WebAccess.HypertextFetcher"/>.
            </summary>
            <param name="maxRetries">Legt fest, wievielmal das Herunterladen zu versuchen ist.</param>
            <param name="maxParallelWebRequests">Legt fest, wie viele parallel laufen dürfen.</param>
        </member>
        <member name="M:Reusable.WebAccess.HypertextFetcher.DownloadFrom(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="T:Reusable.WebAccess.IHyperlinksParser">
            <summary>
            Schnittstelle für die Zergliederung von Links in Hypertext.
            </summary>
        </member>
        <member name="M:Reusable.WebAccess.IHyperlinksParser.ParseHyperlinks(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Zergliedert bestimmte Links von Hypertext.
            </summary>
            <param name="hypertext">Der gegebene Hypertext.</param>
            <param name="keywords">Die zu suchenden Schlüsselwörter, welche die Ergebnisse beschränken. Gibt nur die Marken zurück, die mit einem Schlüsselwort übereinstimmen. Der Vergleich unterscheidet nicht zwischen Klein- und Großschreibung. Wenn kein Schlüsselwort gegeben wird, hat dieser Parameter keine Wirkung.</param>
            <exception cref="T:Reusable.WebAccess.ParserException">Dieser Typ darf speziell behandelt werden.</exception>
        </member>
        <member name="T:Reusable.WebAccess.IHypertextContentParser`1">
            <summary>
            Schnittstelle für die Zergliderung von Inhalt in Hypertext.
            </summary>
            <typeparam name="DataType">Der Typ, in dem die zergliederte Daten gespeichert werden sollen.</typeparam>
        </member>
        <member name="M:Reusable.WebAccess.IHypertextContentParser`1.ParseContent(System.String)">
            <summary>
            Zergliedert den gegebenen Hypertext.
            </summary>
            <param name="hypertext">Der zu zergliedernde Hypertext.</param>
            <returns>Die aus den erfassten Daten erstellten Objekte.</returns>
            <exception cref="T:Reusable.WebAccess.ParserException">Dieser Typ darf speziell behandelt werden.</exception>
        </member>
        <member name="T:Reusable.WebAccess.IHypertextFetcher">
            <summary>
            Schnittstelle für das Herunterladen von Hypertext.
            </summary>
        </member>
        <member name="M:Reusable.WebAccess.IHypertextFetcher.DownloadFrom(System.Uri)">
            <summary>
            Ladet den Hypertext aus einem gegebenen URL herunter.
            </summary>
            <param name="url">Das gegebene URL.</param>
            <returns>Der Hypertext der Internetseite.</returns>
        </member>
        <member name="T:Reusable.WebAccess.ParserException">
            <summary>
            Stellt eine Ausnahme dar, die beim Zergliedern auftritt.
            </summary>
        </member>
        <member name="M:Reusable.WebAccess.ParserException.#ctor(System.String,System.Exception)">
            <summary>
            Erstellt eine neue Instanz von <see cref="T:Reusable.WebAccess.ParserException"/>.
            </summary>
            <param name="message">Eine Nachricht.</param>
            <param name="innerException">Die einzuwickelnde Ausnahme.</param>
        </member>
    </members>
</doc>
